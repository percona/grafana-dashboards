{"version":3,"sources":["../src/breadcrumb_ctrl.js"],"names":["_","PanelCtrl","panelDefaults","isRootDashboard","hideTextInRootDashboard","breadcrumbItemsMaxAmount","BreadcrumbCtrl","$scope","$injector","$location","backendSrv","defaults","panel","events","on","onInitEditMode","bind","navigate","dashboardList","windowLocation","sessionStorage","getItem","setItem","search","breadcrumb","items","split","createDashboardList","JSON","parse","updateText","window","onpopstate","event","length","state","addEditorTab","allDashboards","filterDashboardList","then","result","DBlist","allDBs","orgId","urlRoot","location","href","substr","indexOf","filter","filterItem","isInDatabase","findIndex","dbItem","url","map","item","uid","find","name","title","params","parseParamsString","fullUrl","stringify","parsedBreadcrumb","index","pop","grafanaQueryParams","Object","keys","param","path","pathname","currentDashboard","dbSource","uri","obj","push","parseInt","isNaN","shift","parseBreadcrumbForUrl","queryObject","parseParamsObject","replace","history","replaceState","paramsObj","charAt","paramsArray","paramItem","paramItemArr","paramsString","paramKey","splice","queryParams","templateUrl"],"mappings":"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","file":"breadcrumb_ctrl.js","sourcesContent":["/**\n * <h3>Breadcrumb panel for Grafana</h3>\n *\n * This breadcumb panel utilizes session storage to store dashboards where user has visited.\n * When panel is loaded it first checks if breadcrumb is given in url params and utilizes that.\n * If no breadcrumb is given in url params then panel tries to read breadcrumb from session storage.\n * Finally the panel adds the just loaded dashboard as the latest item in dashboard and updates session storage.\n * Breadcrumb stores the dashboard's name, url and possible query params to the session storage.\n * If user navigates with browser back button then breadcrumb is recreated from previous url params.\n * Also if user navigates back by clicking one of the breadcrumb items then the items following the selected\n * item are removed from breadcrumb, user is moved to selected dashboard and session storage is updated.\n */\nimport _ from \"lodash\";\nimport { PanelCtrl } from \"app/plugins/sdk\";\nimport \"./breadcrumb.css!\";\nconst panelDefaults = {\n    isRootDashboard: false,\n    hideTextInRootDashboard: false,\n    breadcrumbItemsMaxAmount: 25\n};\nclass BreadcrumbCtrl extends PanelCtrl {\n    /**\n     * Breadcrumb class constructor\n     * @param {IBreadcrumbScope} $scope Angular scope\n     * @param {ng.auto.IInjectorService} $injector Angluar injector service\n     * @param {ng.ILocationService} $location Angular location service\n     * @param {any} backendSrv Grafana backend callback\n     */\n    constructor($scope, $injector, $location, backendSrv) {\n        super($scope, $injector);\n        panelDefaults.isRootDashboard = false;\n        panelDefaults.hideTextInRootDashboard = false;\n        panelDefaults.breadcrumbItemsMaxAmount = 25;\n        _.defaults(this.panel, panelDefaults);\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        // Init variables\n        $scope.navigate = this.navigate.bind(this);\n        this.backendSrv = backendSrv;\n        this.dashboardList = [];\n        this.windowLocation = $location;\n        // Check for browser session storage and create one if it doesn't exist\n        if (!sessionStorage.getItem(\"dashlist\") || this.panel.isRootDashboard) {\n            sessionStorage.setItem(\"dashlist\", \"[]\");\n        }\n        // Check if URL params has breadcrumb\n        if ($location.search().breadcrumb) {\n            const items = $location.search().breadcrumb.split(\",\");\n            this.createDashboardList(items);\n        }\n        else {\n            // If no URL params are given then get dashboard list from session storage\n            this.dashboardList = JSON.parse(sessionStorage.getItem(\"dashlist\"));\n        }\n        this.updateText();\n        // Listen for PopState events so we know when user navigates back with browser\n        // On back navigation we'll take the changed breadcrumb param from url query and\n        // recreate dashboard list\n        window.onpopstate = (event) => {\n            if (this.dashboardList.length > 0) {\n                if ($location.state().breadcrumb) {\n                    const items = $location.state().breadcrumb.split(\",\");\n                    this.createDashboardList(items);\n                }\n            }\n        };\n    }\n    /**\n     * Callback for showing panel editor template\n     */\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/digiapulssi-breadcrumb-panel/editor.html', 2);\n    }\n    /**\n     * Create dashboard items\n     * @param {string[]} items Array of dashboard ids\n     */\n    createDashboardList(items) {\n        if (this.allDashboards) {\n            // Dashboard data has been loaeded from Grafana\n            this.filterDashboardList(items, this.allDashboards);\n        }\n        else {\n            // Fetch list of all dashboards from Grafana\n            this.backendSrv.search().then((result) => {\n                this.filterDashboardList(items, result);\n            });\n        }\n    }\n    /**\n     * Filter dashboard list\n     * @param {string[]} DBlist Array of dashboards ids to be displayed\n     * @param {any} allDBs All dashboards fetched from Grafana API\n     */\n    filterDashboardList(DBlist, allDBs) {\n        var orgId = this.windowLocation.search()[\"orgId\"];\n        var urlRoot = window.location.href.substr(0, window.location.href.indexOf(\"/d/\") + 1);\n        this.dashboardList = DBlist.filter((filterItem) => {\n            const isInDatabase = _.findIndex(allDBs, (dbItem) => dbItem.url.indexOf(`/d/${filterItem}`) > -1) > -1;\n            return (isInDatabase);\n        })\n            .map((item) => {\n            const uid = _.find(allDBs, (dbItem) => dbItem.url.indexOf(`/d/${item}`) > -1).uid;\n            return {\n                url: `/d/${uid}`,\n                name: _.find(allDBs, (dbItem) => dbItem.url.indexOf(`/d/${item}`) > -1).title,\n                params: this.parseParamsString({ orgId }),\n                uid,\n                fullUrl: urlRoot + '/d/' + uid + this.parseParamsString({ orgId })\n            };\n        });\n        // Update session storage\n        sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\n    }\n    /**\n     * Parse breadcrumb string for URL\n     * @returns {string}\n     */\n    parseBreadcrumbForUrl() {\n        let parsedBreadcrumb = \"\";\n        this.dashboardList.map((item, index) => {\n            parsedBreadcrumb += item.url.split(\"/\").pop();\n            if (index < this.dashboardList.length - 1) {\n                parsedBreadcrumb += \",\";\n            }\n        });\n        return parsedBreadcrumb;\n    }\n    /**\n     * Update Breadcrumb items\n     */\n    updateText() {\n        // Get Grafana query params\n        let grafanaQueryParams = \"\";\n        Object.keys(this.windowLocation.search()).map((param) => {\n            if (this.windowLocation.search()[param] && this.windowLocation.search()[param] !== \"null\") {\n                grafanaQueryParams += \"&\" + param + \"=\" + this.windowLocation.search()[param];\n            }\n        });\n        // Fetch list of all dashboards from Grafana\n        this.backendSrv.search().then((result) => {\n            this.allDashboards = result;\n            // Set current dashboard\n            var path = window.location.pathname.split(\"/\");\n            this.currentDashboard = path.pop();\n            const dbSource = \"/d/\" + path.pop();\n            const uri = `${dbSource}`;\n            var obj = _.find(result, (dbItem) => dbItem.url.indexOf(`${uri}`) > -1);\n            // Add current dashboard to breadcrumb if it doesn't exist\n            if (_.findIndex(this.dashboardList, (dbItem) => dbItem.url.indexOf(`${uri}`) > -1) < 0 && obj) {\n                this.dashboardList.push({ url: uri, name: obj.title, params: grafanaQueryParams, uid: obj.uid,\n                    fullUrl: window.location.href });\n            }\n            // If the amount of items exceeds the maximum then remove oldest item\n            const breadcrumbItemsMaxAmount = parseInt(this.panel.breadcrumbItemsMaxAmount, 10);\n            if (!isNaN(breadcrumbItemsMaxAmount) && this.dashboardList.length > breadcrumbItemsMaxAmount) {\n                this.dashboardList.shift();\n            }\n            // Update session storage\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\n            // Parse modified breadcrumb and set it to url query params\n            const parsedBreadcrumb = this.parseBreadcrumbForUrl();\n            const queryObject = this.parseParamsObject(grafanaQueryParams);\n            queryObject[\"breadcrumb\"] = parsedBreadcrumb;\n            this.windowLocation.state(queryObject).replace();\n            history.replaceState(queryObject, \"\");\n        });\n    }\n    /**\n     * Parse params string to object\n     * @param {string} params\n     * @returns {Object}\n     */\n    parseParamsObject(params) {\n        const paramsObj = {};\n        if (params.charAt(0) === \"?\" || params.charAt(0) === \"&\") {\n            params = params.substr(1, params.length);\n        }\n        const paramsArray = params.split(\"&\");\n        paramsArray.map((paramItem) => {\n            const paramItemArr = paramItem.split(\"=\");\n            paramsObj[paramItemArr[0]] = paramItemArr[1];\n        });\n        return paramsObj;\n    }\n    /**\n     * Parse params object to string\n     * @param {Object} params\n     * @returns {string}\n     */\n    parseParamsString(params) {\n        let paramsString = \"?\";\n        Object.keys(params).map((paramKey, index) => {\n            paramsString += paramKey + \"=\" + params[paramKey];\n            if (index < Object.keys(params).length - 1) {\n                paramsString += \"&\";\n            }\n        });\n        return paramsString;\n    }\n    /**\n     * Navigate to given dashboard\n     * @param {string} url\n     */\n    navigate(url, params) {\n        // Check if user is navigating backwards in breadcrumb and\n        // remove all items that follow the selected item in that case\n        const index = _.findIndex(this.dashboardList, (dbItem) => dbItem.url.indexOf(`${url}`) > -1);\n        if (index > -1 && this.dashboardList.length >= index + 2) {\n            this.dashboardList.splice(index + 1, this.dashboardList.length - index - 1);\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\n        }\n        // Parse params string to object\n        const queryParams = this.parseParamsObject(params);\n        // Delete possible breadcrumb param so that breadcrumb from session will be used instead\n        delete queryParams[\"breadcrumb\"];\n        // Check url root assuming that Grafana dashboard url has string \"/d/\"\n        let urlRoot = window.location.href.substr(0, window.location.href.indexOf(\"/d/\") + 1);\n        if (url.charAt(0) != \"/\") {\n            urlRoot += \"/\";\n        }\n    }\n}\nBreadcrumbCtrl.templateUrl = \"module.html\";\nexport { BreadcrumbCtrl, BreadcrumbCtrl as PanelCtrl };\n//# sourceMappingURL=breadcrumb_ctrl.js.map"]}