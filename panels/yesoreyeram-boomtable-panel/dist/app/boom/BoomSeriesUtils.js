System.register(["lodash", "./index", "../GrafanaUtils"], function (exports_1, context_1) {
    "use strict";
    var lodash_1, index_1, GrafanaUtils_1, getBGColor, getTextColor, getThresholds, getLink, GetValuesReplaced;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (lodash_1_1) {
                lodash_1 = lodash_1_1;
            },
            function (index_1_1) {
                index_1 = index_1_1;
            },
            function (GrafanaUtils_1_1) {
                GrafanaUtils_1 = GrafanaUtils_1_1;
            }
        ],
        execute: function () {
            exports_1("getBGColor", getBGColor = function (value, pattern, thresholds, list_of_bgColors_based_on_thresholds, bgColorOverRides) {
                var bgColor = 'transparent';
                if (lodash_1.default.isNaN(value) || value === null) {
                    bgColor = pattern.null_color || 'darkred';
                    if (pattern.null_color === '') {
                        bgColor = 'transparent';
                    }
                }
                else {
                    bgColor = pattern.defaultBGColor || bgColor;
                    if (pattern.enable_bgColor && pattern.bgColors) {
                        bgColor = index_1.getItemBasedOnThreshold(thresholds, list_of_bgColors_based_on_thresholds, value, bgColor);
                    }
                    if (pattern.enable_bgColor_overrides && pattern.bgColors_overrides !== '') {
                        var _bgColors_overrides = bgColorOverRides
                            .filter(function (con) { return con.indexOf('->'); })
                            .map(function (con) { return con.split('->'); })
                            .filter(function (con) { return +con[0] === value; })
                            .map(function (con) { return con[1]; });
                        if (_bgColors_overrides.length > 0 && _bgColors_overrides[0] !== '') {
                            bgColor = ('' + _bgColors_overrides[0]).trim();
                        }
                    }
                }
                return index_1.normalizeColor(bgColor);
            });
            exports_1("getTextColor", getTextColor = function (value, pattern, thresholds, list_of_textColors_based_on_thresholds, txtColorOverrides) {
                var textColor = document.body.classList.contains('theme-light') ? 'black' : 'white';
                if (lodash_1.default.isNaN(value) || value === null) {
                    textColor = pattern.null_textcolor || textColor;
                }
                else {
                    textColor = pattern.defaultTextColor || textColor;
                    if (pattern.enable_textColor && pattern.textColors) {
                        textColor = index_1.getItemBasedOnThreshold(thresholds, list_of_textColors_based_on_thresholds, value, textColor);
                    }
                    if (pattern.enable_textColor_overrides && pattern.textColors_overrides !== '') {
                        var _textColors_overrides = txtColorOverrides
                            .filter(function (con) { return con.indexOf('->'); })
                            .map(function (con) { return con.split('->'); })
                            .filter(function (con) { return +con[0] === value; })
                            .map(function (con) { return con[1]; });
                        if (_textColors_overrides.length > 0 && _textColors_overrides[0] !== '') {
                            textColor = ('' + _textColors_overrides[0]).trim();
                        }
                    }
                }
                return index_1.normalizeColor(textColor);
            });
            exports_1("getThresholds", getThresholds = function (thresholdsArray, enable_time_based_thresholds, time_based_thresholds, currentTimeStamp) {
                if (enable_time_based_thresholds) {
                    var metricrecivedTimeStamp_1 = currentTimeStamp || new Date();
                    var metricrecivedTimeStamp_innumber_1 = metricrecivedTimeStamp_1.getHours() * 100 + metricrecivedTimeStamp_1.getMinutes();
                    var weekdays_1 = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
                    lodash_1.default.each(time_based_thresholds, function (tbtx) {
                        if (tbtx &&
                            tbtx.from &&
                            tbtx.to &&
                            tbtx.enabledDays &&
                            metricrecivedTimeStamp_innumber_1 >= +tbtx.from &&
                            metricrecivedTimeStamp_innumber_1 <= +tbtx.to &&
                            tbtx.enabledDays.toLowerCase().indexOf(weekdays_1[metricrecivedTimeStamp_1.getDay()]) > -1 &&
                            tbtx.threshold) {
                            thresholdsArray = (tbtx.threshold + '').split(',').map(function (d) { return +d; });
                        }
                    });
                }
                return thresholdsArray || [];
            });
            exports_1("getLink", getLink = function (enable_clickable_cells, clickable_cells_link, range) {
                var link = enable_clickable_cells ? clickable_cells_link || '#' : '#';
                if (link && link !== '#') {
                    link += link.indexOf('?') > -1 ? "&from=" + range.from : "?from=" + range.from;
                    link += "&to=" + range.to;
                }
                return link;
            });
            exports_1("GetValuesReplaced", GetValuesReplaced = function (strToReplace, value, valueformatted, stats, decimals, format, _metricname, _tags, delimiter) {
                var value_raw = lodash_1.default.isNaN(value) || value === null ? 'null' : value.toString().trim();
                var value_formatted = lodash_1.default.isNaN(value) || value === null ? 'null' : valueformatted.toString().trim();
                strToReplace = strToReplace.replace(new RegExp('_value_min_raw_', 'g'), stats.min);
                strToReplace = strToReplace.replace(new RegExp('_value_max_raw_', 'g'), stats.max);
                strToReplace = strToReplace.replace(new RegExp('_value_avg_raw_', 'g'), stats.avg);
                strToReplace = strToReplace.replace(new RegExp('_value_current_raw_', 'g'), stats.current);
                strToReplace = strToReplace.replace(new RegExp('_value_total_raw_', 'g'), stats.total);
                strToReplace = strToReplace.replace(new RegExp('_value_raw_', 'g'), value_raw);
                strToReplace = strToReplace.replace(new RegExp('_value_min_', 'g'), GrafanaUtils_1.get_formatted_value(stats.min, decimals, format));
                strToReplace = strToReplace.replace(new RegExp('_value_max_', 'g'), GrafanaUtils_1.get_formatted_value(stats.max, decimals, format));
                strToReplace = strToReplace.replace(new RegExp('_value_avg_', 'g'), GrafanaUtils_1.get_formatted_value(stats.avg, decimals, format));
                strToReplace = strToReplace.replace(new RegExp('_value_current_', 'g'), GrafanaUtils_1.get_formatted_value(stats.current, decimals, format));
                strToReplace = strToReplace.replace(new RegExp('_value_total_', 'g'), GrafanaUtils_1.get_formatted_value(stats.total, decimals, format));
                strToReplace = strToReplace.replace(new RegExp('_value_', 'g'), value_formatted);
                if (delimiter.toLowerCase() === 'tag') {
                    strToReplace = strToReplace.replace(new RegExp('{{metric_name}}', 'g'), _metricname);
                    strToReplace = index_1.replace_tags_from_field(strToReplace, _tags);
                }
                return strToReplace;
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,