{"version":3,"sources":["../src/aggregates.js"],"names":["AVG","SUM","CNT","MIN","MAX","FIRST","LAST","sum","values","reduce","s","n","min","Math","max","aggregates","length","aggregate","type","func","aggregatesMap","name","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,S,GAAM,K;AACNC,S,GAAM,K;AACNC,S,GAAM,K;AACNC,S,GAAM,K;AACNC,S,GAAM,K;AACNC,W,GAAQ,O;AACRC,U,GAAO,M;;AAEPC,S,GAAM,SAANA,GAAM,CAACC,MAAD;AAAA,eAAYA,OAAOC,MAAP,CAAc,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAUD,IAAIC,CAAd;AAAA,SAAd,EAA+B,CAA/B,CAAZ;AAAA,O;;AAENC,S,GAAM,SAANA,GAAM,CAACJ,MAAD;AAAA,eAAYK,KAAKD,GAAL,gCAAYJ,MAAZ,EAAZ;AAAA,O;;AAENM,S,GAAM,SAANA,GAAM,CAACN,MAAD;AAAA,eAAYK,KAAKC,GAAL,gCAAYN,MAAZ,EAAZ;AAAA,O;;AAENO,gB,mDACHf,G,EAAM,UAACQ,MAAD;AAAA,eAAYD,IAAIC,MAAJ,IAAcA,OAAOQ,MAAjC;AAAA,O,gCACNf,G,EAAM,UAACO,MAAD;AAAA,eAAYD,IAAIC,MAAJ,CAAZ;AAAA,O,gCACNN,G,EAAM,UAACM,MAAD;AAAA,eAAYA,OAAOQ,MAAnB;AAAA,O,gCACNb,G,EAAM,UAACK,MAAD;AAAA,eAAYI,IAAIJ,MAAJ,CAAZ;AAAA,O,gCACNJ,G,EAAM,UAACI,MAAD;AAAA,eAAYM,IAAIN,MAAJ,CAAZ;AAAA,O,gCACNH,K,EAAQ,UAACG,MAAD;AAAA,eAAYA,OAAOQ,MAAP,IAAiB,CAAjB,GAAqB,IAArB,GAA4BR,OAAO,CAAP,CAAxC;AAAA,O,gCACRF,I,EAAO,UAACE,MAAD;AAAA,eAAYA,OAAOQ,MAAP,IAAiB,CAAjB,GAAqB,IAArB,GAA4BR,OAAOA,OAAOQ,MAAP,GAAgB,CAAvB,CAAxC;AAAA,O;;2BAGGC,S,GAAY,SAAZA,SAAY,CAACC,IAAD,EAAU;AACjC,YAAMC,OAAOJ,WAAWG,IAAX,CAAb;AACA,eAAO,UAACV,MAAD;AAAA,iBAAYW,KAAKX,MAAL,CAAZ;AAAA,SAAP;AACD,O;;;;+BAEYY,a,GAAgB,CAC3B,EAAEC,MAAM,SAAR,EAAmBC,OAAOtB,GAA1B,EAD2B,EAE3B,EAAEqB,MAAM,KAAR,EAAeC,OAAOrB,GAAtB,EAF2B,EAG3B,EAAEoB,MAAM,OAAR,EAAiBC,OAAOpB,GAAxB,EAH2B,EAI3B,EAAEmB,MAAM,KAAR,EAAeC,OAAOnB,GAAtB,EAJ2B,EAK3B,EAAEkB,MAAM,KAAR,EAAeC,OAAOlB,GAAtB,EAL2B,EAM3B,EAAEiB,MAAM,OAAR,EAAiBC,OAAOjB,KAAxB,EAN2B,EAO3B,EAAEgB,MAAM,MAAR,EAAgBC,OAAOhB,IAAvB,EAP2B,C;;;;yBAUd;AACbN,gBADa;AAEbC,gBAFa;AAGbC,gBAHa;AAIbC,gBAJa;AAKbC,gBALa;AAMbC,oBANa;AAObC;AAPa,O","file":"aggregates.js","sourcesContent":["const AVG = 'AVG';\r\nconst SUM = 'SUM';\r\nconst CNT = 'CNT';\r\nconst MIN = 'MIN';\r\nconst MAX = 'MAX';\r\nconst FIRST = 'FIRST';\r\nconst LAST = 'LAST';\r\n\r\nconst sum = (values) => values.reduce((s, n) => s + n, 0);\r\n\r\nconst min = (values) => Math.min(...values);\r\n\r\nconst max = (values) => Math.max(...values);\r\n\r\nconst aggregates = {\r\n  [AVG]: (values) => sum(values) / values.length,\r\n  [SUM]: (values) => sum(values),\r\n  [CNT]: (values) => values.length,\r\n  [MIN]: (values) => min(values),\r\n  [MAX]: (values) => max(values),\r\n  [FIRST]: (values) => values.length == 0 ? null : values[0],\r\n  [LAST]: (values) => values.length == 0 ? null : values[values.length - 1]\r\n};\r\n\r\nexport const aggregate = (type) => {\r\n  const func = aggregates[type];\r\n  return (values) => func(values);\r\n};\r\n\r\nexport const aggregatesMap = [\r\n  { name: 'Average', value: AVG },\r\n  { name: 'Sum', value: SUM },\r\n  { name: 'Count', value: CNT },\r\n  { name: 'Min', value: MIN },\r\n  { name: 'Max', value: MAX },\r\n  { name: 'First', value: FIRST },\r\n  { name: 'Last', value: LAST }\r\n];\r\n\r\nexport default {\r\n  AVG,\r\n  SUM,\r\n  CNT,\r\n  MIN,\r\n  MAX,\r\n  FIRST,\r\n  LAST\r\n};"]}